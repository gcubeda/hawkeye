openapi: 3.0.3
info:
  title: Hawkeye
  description: Detect images in a video stream and execute automated actions.
  version: 1.0.0
  license:
    name: MIT
servers:
  - url: 'https'
paths:
  "/v1/watchers":
    get:
      summary: List all watchers
      operationId: handlers::watchers_list
      responses:
        "200":
          description: Successfull response.
          content:
            application/json:
              examples:
                simple:
                  $ref: '#/components/examples/ListWatchers'
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WatcherFull'
    post:
      summary: Create a new Watcher
      operationId: handlers::create_watcher
      requestBody:
        content:
          application/json:
            examples:
              basic:
                $ref: '#/components/examples/CreationPayload'
            schema:
              $ref: '#/components/schemas/WatcherBase'
      responses:
        "201":
          description: Successfull response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WatcherFull'

  "/v1/watchers/{watcher_id}":
    parameters:
      - $ref: '#/components/parameters/WatcherIdPath'
    get:
      summary: Get a Watcher
      operationId: handlers::get_watcher
      responses:
        "200":
          description: Successfull response.
          content:
            application/json:
              examples:
                basic:
                  $ref: '#/components/examples/SingleWatcherResult'
              schema:
                $ref: '#/components/schemas/WatcherFull'
    delete:
      summary: Delete a Watcher
      operationId: handlers::delete_watcher
      responses:
        "200":
          description: Successfull executed operation.
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                properties:
                  message:
                    type: string
                    description: Description of successfull operation.

  "/v1/watchers/{watcher_id}/start":
    parameters:
      - $ref: '#/components/parameters/WatcherIdPath'
    post:
      summary: Start the Watcher
      operationId: handlers::start_watcher
      responses:
        "200":
          description: Watcher is starting.
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                properties:
                  message:
                    type: string
                    description: Description of successfull operation.


  "/v1/watchers/{watcher_id}/stop":
    parameters:
      - $ref: '#/components/parameters/WatcherIdPath'
    post:
      summary: Stop the Watcher
      operationId: handlers::stop_watcher
      responses:
        "200":
          description: Watcher is stopping.
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                properties:
                  message:
                    type: string
                    description: Description of successfull operation.


  "/v1/watchers/{watcher_id}/video-frame":
    parameters:
      - $ref: '#/components/parameters/WatcherIdPath'
    get:
      summary: Latest video frame
      description: Expose the latest video frame the Watcher has captured.
      operationId: handlers::get_video_frame
      responses:
        "200":
          description: The image bytes
          content:
            image/png:
              schema:
                type: string
                format: binary
components:

  parameters:
    WatcherIdPath:
      name: watcher_id
      in: path
      description: The Watcher ID.
      required: true
      allowEmptyValue: false
      schema:
        type: string

  schemas:
    WatcherFull:
      allOf:
        - type: object
          required:
            - id
          properties:
            id:
              type: string
              description: Unique identifier for the watcher.
            status:
              type: string
              enum:
                - ready
                - running
                - pending
                - error
            status_description:
              type: string
              description: A more detailed description of the status of the Watcher.
            source:
              type: object
              properties:
                ingest_ip:
                  type: string
                  format: uri
                  example: dc401bafb-15a.elb.us-east-1.amazonaws.com
        - $ref: '#/components/schemas/WatcherBase'

    WatcherBase:
      type: object
      required:
        - slate_url
        - source
        - transitions
      properties:
        description:
          type: string
          description: A human readable description of the watcher.
        slate_url:
            type: string
            format: uri
            description: The slate image url, needs to be publicly accessible.
        source:
          type: object
          description: Sepecify the video source configurations.
          properties:
            codec:
              type: string
              enum:
                - h264
            container:
              type: string
              enum:
                - mpeg-ts
                - raw_video
            ingest_port:
              type: number
              description: Port to be used by the server to receive the video feed.
            transport:
              type: object
              properties:
                protocol:
                  type: string
                  enum:
                    - rtp
                  description: Protocol the watcher is expecting to receive the video feed.
        transitions:
          type: array
          items:
            type: object
            properties:
              actions:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/HttpCallAction'
              from:
                type: string
                enum:
                  - content
                  - slate
              to:
                type: string
                enum:
                  - content
                  - slate

    Action:
      type: object
      properties:
        description:
          type: string
          description: Description of the action.

    HttpCallAction:
      allOf:
        - $ref: '#/components/schemas/Action'
        - type: object
          properties:
            type:
              type: string
              enum:
                - http_call
            authorization:
              type: object
              properties:
                basic:
                  type: object
                  properties:
                    username:
                      type: string
                    password:
                      type: string
            body:
              type: string
              description: Body of the request to be used.
            headers:
              type: object
              description: Key value pair of headers the action HTTP call should use.
            method:
              type: string
              enum:
                - POST
                - GET
                - PUT
                - PATCH
                - DELETE
            retires:
              type: number
              description: Number of times the action should be retried.
            timeout:
              type: number
              description: Timeout in seconds for the HTTP request to execute.

  examples:

    ListWatchers:
      description: A list of Wachers as it is returned by the API.
      value:
        [
          {
            "id": "ad128d51-9a1c-407d-9edb-d590eb9c3d74",
            "description": "Test watcher",
            "slate_url": "https://github.com/cbsinteractive/hawkeye/raw/master/resources/slate_213x120.jpg",
            "source": {
              "ingest_ip": "uniqueservername.example.com",
              "ingest_port": 5000,
              "container": "raw-video",
              "codec": "h264",
              "transport": {
                "protocol": "rtp"
              }
            },
            "status": "ready",
            "transitions": [
              {
                "from": "content",
                "to": "slate",
                "actions": [
                  {
                    "description": "Trigger AdBreak using API",
                    "type": "http_call",
                    "method": "POST",
                    "retries": 3,
                    "timeout": 10,
                    "url": "http://api.example.com/v1/organization/cbsa6fhh/channel/slate4g85/ad-break",
                    "authorization": {
                      "basic": {
                        "username": "myusername",
                        "password": "somepassword"
                      }
                    },
                    "headers": {
                      "Content-Type": "application/json"
                    },
                    "body": "{\"duration\":300}"
                  }
                ]
              },
              {
                "from": "slate",
                "to": "content",
                "actions": [
                  {
                    "description": "Use dump out of AdBreak API call",
                    "type": "http_call",
                    "method": "DELETE",
                    "timeout": 10,
                    "url": "http://api.example.com/v1/organization/cbsa6fhh/channel/slate4g85/ad-break",
                    "authorization": {
                      "basic": {
                        "username": "myusername",
                        "password": "somepassword"
                      }
                    }
                  }
                ]
              }
            ]
          }
        ]

    SingleWatcherResult:
      description: Watcher that is returned by the API.
      value:
        {
          "id": "ad128d51-9a1c-407d-9edb-d590eb9c3d74",
          "description": "Test watcher",
          "slate_url": "https://github.com/cbsinteractive/hawkeye/raw/master/resources/slate_213x120.jpg",
          "source": {
            "ingest_ip": "uniqueservername.example.com",
            "ingest_port": 5000,
            "container": "raw-video",
            "codec": "h264",
            "transport": {
              "protocol": "rtp"
            }
          },
          "status": "ready",
          "transitions": [
            {
              "from": "content",
              "to": "slate",
              "actions": [
                {
                  "description": "Trigger AdBreak using API",
                  "type": "http_call",
                  "method": "POST",
                  "retries": 3,
                  "timeout": 10,
                  "url": "http://api.example.com/v1/organization/cbsa6fhh/channel/slate4g85/ad-break",
                  "authorization": {
                    "basic": {
                      "username": "myusername",
                      "password": "somepassword"
                    }
                  },
                  "headers": {
                    "Content-Type": "application/json"
                  },
                  "body": "{\"duration\":300}"
                }
              ]
            },
            {
              "from": "slate",
              "to": "content",
              "actions": [
                {
                  "description": "Use dump out of AdBreak API call",
                  "type": "http_call",
                  "method": "DELETE",
                  "timeout": 10,
                  "url": "http://api.example.com/v1/organization/cbsa6fhh/channel/slate4g85/ad-break",
                  "authorization": {
                    "basic": {
                      "username": "myusername",
                      "password": "somepassword"
                    }
                  }
                }
              ]
            }
          ]
        }

    CreationPayload:
      description: A valid JSON payload that can be used to create a Watcher.
      value:
        {
          "description": "Test watcher",
          "slate_url": "https://github.com/cbsinteractive/hawkeye/raw/master/resources/slate_213x120.jpg",
          "source": {
            "ingest_port": 5000,
            "container": "raw-video",
            "codec": "h264",
            "transport": {
              "protocol": "rtp"
            }
          },
          "transitions": [
            {
              "from": "content",
              "to": "slate",
              "actions": [
                {
                  "description": "Trigger AdBreak using API",
                  "type": "http_call",
                  "method": "POST",
                  "retries": 3,
                  "timeout": 10,
                  "url": "http://api.example.com/v1/organization/cbsa6fhh/channel/slate4g85/ad-break",
                  "authorization": {
                    "basic": {
                      "username": "myusername",
                      "password": "somepassword"
                    }
                  },
                  "headers": {
                    "Content-Type": "application/json"
                  },
                  "body": "{\"duration\":300}"
                }
              ]
            },
            {
              "from": "slate",
              "to": "content",
              "actions": [
                {
                  "description": "Use dump out of AdBreak API call",
                  "type": "http_call",
                  "method": "DELETE",
                  "timeout": 10,
                  "url": "http://api.example.com/v1/organization/cbsa6fhh/channel/slate4g85/ad-break",
                  "authorization": {
                    "basic": {
                      "username": "myusername",
                      "password": "somepassword"
                    }
                  }
                }
              ]
            }
          ]
        }

